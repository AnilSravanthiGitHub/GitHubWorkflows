name: DeploymentaksTerraform

permissions:
  id-token: write
  contents: read

on: 
  workflow_call:  
    inputs:    
      environment:         
         type: string 
      ref:
         type: string
      resource_group_name:
         type: string
      location:
         type: string
      storage_account_name:
         type: string
      container_name:
         type: string

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_SECRET_ID:
        required: true

jobs:
   deploy:
    name: Azure Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ inputs.ref }}
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            terraform_version: 1.5.0 
            terraform_wrapper: false

      - name: Azure login
        id: login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          arm_use_oidc: true

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Create resource group
            az group create --name ${{ inputs.resource_group_name }} --location ${{ inputs.location }}

            # Create storage account
            az storage account create --resource-group ${{ inputs.resource_group_name }} --name ${{ inputs.storage_account_name }} --sku Standard_LRS --encryption-services blob

            # Create blob container
            az storage container create --name ${{ inputs.container_name }} --account-name ${{ inputs.storage_account_name }}
      
      - name: update backend-config.tfvars
        run: |
          echo 'resource_group_name = "${{ inputs.resource_group_name }}"' > terraform/resources/backend-config.tfvars
          echo 'storage_account_name = "${{ inputs.storage_account_name }}"' >> terraform/resources/backend-config.tfvars
          echo 'container_name = "${{ inputs.container_name }}"' >> terraform/resources/backend-config.tfvars
          echo 'key = "terraform.tfstate"' >> terraform/resources/backend-config.tfvars

      # - name: update terraform.tfvars
      #   run: | 
      #     echo 'resource_group_name = "${{ inputs.resource_group_name }}"' > terraform/resources/terraform.tfvars
      #     echo 'app_service_plan_name = "${{ inputs.app_service_plan_name }}"' >> terraform/resources/terraform.tfvars
      #     echo 'app_service_name = "${{ inputs.app_service_name }}"' >> terraform/resources/terraform.tfvars
      #     echo 'app_insights_name = "${{ inputs.app_insights_name }}"' >> terraform/resources/terraform.tfvars
      
      - name: Terraform Init 
        run: terraform init -backend-config=backend-config.tfvars  
        working-directory: terraform/resources
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}


      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/resources

      - name: Terraform Plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: | 
         terraform plan -var-file="terraform.tfvars"
        working-directory: terraform/resources
        

      - name: Terraform Apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: | 
         terraform apply -auto-approve -var-file="terraform.tfvars"
        working-directory: terraform/resources

      - name: Terraform Output
        run: terraform output

      # - name: Get Storage Account Key
      #   id: get-key
      #   run: |
      #     echo "::set-output name=key::$(az storage account keys list \
      #       --resource-group ${{ inputs.resource_group_name }} \
      #       --account-name ${{ inputs.storage_account_name }} \
      #       --query '[0].value' \
      #       --output tsv)"
        # env:
        #   AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        #   AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        #   AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        #   AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Configure Backend
      #   run: |
      #     terraform init \
      #       -backend-config="resource_group_name=${{ inputs.resource_group_name }}" \
      #       -backend-config="storage_account_name=${{ inputs.storage_account_name }}" \
      #       -backend-config="container_name=${{ inputs.container_name }}" \
      #       -backend-config="access_key=${{ steps.get-key.outputs.key }}" \
      #       -backend-config="key=terraform.tfstate"
      #   working-directory: terraform
      


       