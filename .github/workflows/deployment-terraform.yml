name: DeploymentTerraform

permissions:
  id-token: write
  contents: read

on: 
  workflow_call:  
    inputs:    
      environment:
         description: The name of the environment to deploy to
         required: true
         type: string 
      ref:
         description: The name of the ref to to deploy from 
         required: true
         type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
   deploy:
    name: Azure Deploy
    runs-on: windows-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.ref }}
      - run: echo ${{ secrets.AZURE_CLIENT_ID }}
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            terraform_version: 1.5.0 
            terraform_wrapper: false

      - name: Azure login
        id: login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      # - name: Azure CLI script
      #   uses: azure/cli@v2
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       # Create resource group
      #       az group create --name $RESOURCE_GROUP_NAME --location eastus

      #       # Create storage account
      #       az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob

      #       # Create blob container
      #       az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME

      - name: Initialize Terraform
        run: terraform init
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        working-directory: terraform

      - name: Apply Initial Resources
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Get Storage Account Key
        id: get-key
        run: |
          echo "::set-output name=key::$(az storage account keys list \
            --resource-group rg-se-webapp-dev \
            --account-name stterraformbackend \
            --query '[0].value' \
            --output tsv)"
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure Backend
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-se-webapp-dev" \
            -backend-config="storage_account_name=stterraformbackend" \
            -backend-config="container_name=terraform-state" \
            -backend-config="access_key=${{ steps.get-key.outputs.key }}" \
            -backend-config="key=terraform.tfstate"
        working-directory: terraform
      
      
      # - name: Terraform Init
      #   env:
      #     ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #   run: |
      #     cd terraform
      #     terraform init

      - name: List files in terraform directory
        run: |
          cd terraform
          Get-ChildItem  # Ensure the file is in the directory
  
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan --var-file=terraform.tfvars -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      # - name: Save Terraform state
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: terraform-state
      #     path: terraform.tfstate

       